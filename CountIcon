
class CountIcon : Drawable() {

    private val badgePaint: Paint
    private val textPaint: Paint
    private val txtRect = Rect()

    private var count = ""
    private var willDraw: Boolean = false

    init {
        val textSize = 28f
        badgePaint = Paint()
        badgePaint.color = Color.RED
        badgePaint.isAntiAlias = true
        badgePaint.style = Paint.Style.FILL
        textPaint = Paint()
        textPaint.color = Color.WHITE
        textPaint.typeface = Typeface.DEFAULT
        textPaint.textSize = textSize
        textPaint.isAntiAlias = true
        textPaint.textAlign = Paint.Align.CENTER
    }

    override fun draw(canvas: Canvas) {
        if (!willDraw) {
            return
        }
        val bounds = bounds
        val width = (bounds.right - bounds.left).toFloat()
        val height = (bounds.bottom - bounds.top).toFloat()
        val radius = Math.max(width, height) / 4 / 2
        val centerX = width - radius - 1f - 28
        val centerY = radius + 28
        if (count.length <= 2) {
            canvas.drawCircle(centerX, centerY, (radius + 10.5).toInt().toFloat(), badgePaint)
        } else {
            canvas.drawCircle(centerX, centerY, (radius + 10.5).toInt().toFloat(), badgePaint)
        }
        textPaint.getTextBounds(count, 0, count.length, txtRect)
        val textHeight = (txtRect.bottom - txtRect.top).toFloat()
        val textY = centerY + textHeight / 2f
        if (count.length > 2)
            canvas.drawText("99+", centerX, textY, textPaint)
        else
            canvas.drawText(count, centerX, textY, textPaint)
    }

    fun setCount(count: String) {
        this.count = count
        willDraw = !count.equals("0", ignoreCase = true)
        invalidateSelf()
    }

    override fun setAlpha(alpha: Int) {
    }

    override fun setColorFilter(cf: ColorFilter?) {
    }

    override fun getOpacity(): Int {
        return PixelFormat.UNKNOWN
    }
}
